//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g 2012-09-10 22:02:27

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace TextTableTool
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class TextTableLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__24=24;
	public const int ALIGN_LEFT=4;
	public const int ALIGN_RIGHT=5;
	public const int BEGIN=6;
	public const int BY=7;
	public const int Digit=8;
	public const int END=9;
	public const int FROM=10;
	public const int ID=11;
	public const int INT=12;
	public const int LENGTH=13;
	public const int Letter=14;
	public const int PLAIN=15;
	public const int PLAIN_ELEM=16;
	public const int PLAIN_ELEM_LIST=17;
	public const int PLAIN_FILE=18;
	public const int SEPARATED=19;
	public const int TEXT_COMMA=20;
	public const int TEXT_SEMICOLON=21;
	public const int TO=22;
	public const int WS=23;

    // delegates
    // delegators

	public TextTableLexer()
	{
		OnCreated();
	}

	public TextTableLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public TextTableLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__24();
	partial void LeaveRule_T__24();

	// $ANTLR start "T__24"
	[GrammarRule("T__24")]
	private void mT__24()
	{
		EnterRule_T__24();
		EnterRule("T__24", 1);
		TraceIn("T__24", 1);
		try
		{
			int _type = T__24;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:9:7: ( ';' )
			DebugEnterAlt(1);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:9:9: ';'
			{
			DebugLocation(9, 9);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__24", 1);
			LeaveRule("T__24", 1);
			LeaveRule_T__24();
		}
	}
	// $ANTLR end "T__24"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 2);
		TraceIn("WS", 2);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:53:4: ( ( ' ' | '\\t' | '\\f' | '\\n' | '\\r' )+ )
			DebugEnterAlt(1);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:54:3: ( ' ' | '\\t' | '\\f' | '\\n' | '\\r' )+
			{
			DebugLocation(54, 3);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:54:3: ( ' ' | '\\t' | '\\f' | '\\n' | '\\r' )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if (((LA1_0>='\t' && LA1_0<='\n')||(LA1_0>='\f' && LA1_0<='\r')||LA1_0==' '))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:
					{
					DebugLocation(54, 3);
					input.Consume();


					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(54, 38);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 2);
			LeaveRule("WS", 2);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_BEGIN();
	partial void LeaveRule_BEGIN();

	// $ANTLR start "BEGIN"
	[GrammarRule("BEGIN")]
	private void mBEGIN()
	{
		EnterRule_BEGIN();
		EnterRule("BEGIN", 3);
		TraceIn("BEGIN", 3);
		try
		{
			int _type = BEGIN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:57:6: ( 'begin' )
			DebugEnterAlt(1);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:57:8: 'begin'
			{
			DebugLocation(57, 8);
			Match("begin"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BEGIN", 3);
			LeaveRule("BEGIN", 3);
			LeaveRule_BEGIN();
		}
	}
	// $ANTLR end "BEGIN"

	partial void EnterRule_END();
	partial void LeaveRule_END();

	// $ANTLR start "END"
	[GrammarRule("END")]
	private void mEND()
	{
		EnterRule_END();
		EnterRule("END", 4);
		TraceIn("END", 4);
		try
		{
			int _type = END;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:58:4: ( 'end' )
			DebugEnterAlt(1);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:58:6: 'end'
			{
			DebugLocation(58, 6);
			Match("end"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("END", 4);
			LeaveRule("END", 4);
			LeaveRule_END();
		}
	}
	// $ANTLR end "END"

	partial void EnterRule_PLAIN();
	partial void LeaveRule_PLAIN();

	// $ANTLR start "PLAIN"
	[GrammarRule("PLAIN")]
	private void mPLAIN()
	{
		EnterRule_PLAIN();
		EnterRule("PLAIN", 5);
		TraceIn("PLAIN", 5);
		try
		{
			int _type = PLAIN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:59:6: ( 'plain' )
			DebugEnterAlt(1);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:59:8: 'plain'
			{
			DebugLocation(59, 8);
			Match("plain"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLAIN", 5);
			LeaveRule("PLAIN", 5);
			LeaveRule_PLAIN();
		}
	}
	// $ANTLR end "PLAIN"

	partial void EnterRule_SEPARATED();
	partial void LeaveRule_SEPARATED();

	// $ANTLR start "SEPARATED"
	[GrammarRule("SEPARATED")]
	private void mSEPARATED()
	{
		EnterRule_SEPARATED();
		EnterRule("SEPARATED", 6);
		TraceIn("SEPARATED", 6);
		try
		{
			int _type = SEPARATED;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:60:10: ( 'separated' )
			DebugEnterAlt(1);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:60:12: 'separated'
			{
			DebugLocation(60, 12);
			Match("separated"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SEPARATED", 6);
			LeaveRule("SEPARATED", 6);
			LeaveRule_SEPARATED();
		}
	}
	// $ANTLR end "SEPARATED"

	partial void EnterRule_BY();
	partial void LeaveRule_BY();

	// $ANTLR start "BY"
	[GrammarRule("BY")]
	private void mBY()
	{
		EnterRule_BY();
		EnterRule("BY", 7);
		TraceIn("BY", 7);
		try
		{
			int _type = BY;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:61:3: ( 'by' )
			DebugEnterAlt(1);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:61:5: 'by'
			{
			DebugLocation(61, 5);
			Match("by"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BY", 7);
			LeaveRule("BY", 7);
			LeaveRule_BY();
		}
	}
	// $ANTLR end "BY"

	partial void EnterRule_TEXT_SEMICOLON();
	partial void LeaveRule_TEXT_SEMICOLON();

	// $ANTLR start "TEXT_SEMICOLON"
	[GrammarRule("TEXT_SEMICOLON")]
	private void mTEXT_SEMICOLON()
	{
		EnterRule_TEXT_SEMICOLON();
		EnterRule("TEXT_SEMICOLON", 8);
		TraceIn("TEXT_SEMICOLON", 8);
		try
		{
			int _type = TEXT_SEMICOLON;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:62:15: ( 'semicolon' )
			DebugEnterAlt(1);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:62:17: 'semicolon'
			{
			DebugLocation(62, 17);
			Match("semicolon"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TEXT_SEMICOLON", 8);
			LeaveRule("TEXT_SEMICOLON", 8);
			LeaveRule_TEXT_SEMICOLON();
		}
	}
	// $ANTLR end "TEXT_SEMICOLON"

	partial void EnterRule_TEXT_COMMA();
	partial void LeaveRule_TEXT_COMMA();

	// $ANTLR start "TEXT_COMMA"
	[GrammarRule("TEXT_COMMA")]
	private void mTEXT_COMMA()
	{
		EnterRule_TEXT_COMMA();
		EnterRule("TEXT_COMMA", 9);
		TraceIn("TEXT_COMMA", 9);
		try
		{
			int _type = TEXT_COMMA;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:63:11: ( 'comma' )
			DebugEnterAlt(1);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:63:13: 'comma'
			{
			DebugLocation(63, 13);
			Match("comma"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TEXT_COMMA", 9);
			LeaveRule("TEXT_COMMA", 9);
			LeaveRule_TEXT_COMMA();
		}
	}
	// $ANTLR end "TEXT_COMMA"

	partial void EnterRule_FROM();
	partial void LeaveRule_FROM();

	// $ANTLR start "FROM"
	[GrammarRule("FROM")]
	private void mFROM()
	{
		EnterRule_FROM();
		EnterRule("FROM", 10);
		TraceIn("FROM", 10);
		try
		{
			int _type = FROM;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:64:5: ( 'from' )
			DebugEnterAlt(1);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:64:7: 'from'
			{
			DebugLocation(64, 7);
			Match("from"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FROM", 10);
			LeaveRule("FROM", 10);
			LeaveRule_FROM();
		}
	}
	// $ANTLR end "FROM"

	partial void EnterRule_TO();
	partial void LeaveRule_TO();

	// $ANTLR start "TO"
	[GrammarRule("TO")]
	private void mTO()
	{
		EnterRule_TO();
		EnterRule("TO", 11);
		TraceIn("TO", 11);
		try
		{
			int _type = TO;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:65:3: ( 'to' )
			DebugEnterAlt(1);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:65:5: 'to'
			{
			DebugLocation(65, 5);
			Match("to"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TO", 11);
			LeaveRule("TO", 11);
			LeaveRule_TO();
		}
	}
	// $ANTLR end "TO"

	partial void EnterRule_LENGTH();
	partial void LeaveRule_LENGTH();

	// $ANTLR start "LENGTH"
	[GrammarRule("LENGTH")]
	private void mLENGTH()
	{
		EnterRule_LENGTH();
		EnterRule("LENGTH", 12);
		TraceIn("LENGTH", 12);
		try
		{
			int _type = LENGTH;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:66:7: ( 'length' )
			DebugEnterAlt(1);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:66:9: 'length'
			{
			DebugLocation(66, 9);
			Match("length"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LENGTH", 12);
			LeaveRule("LENGTH", 12);
			LeaveRule_LENGTH();
		}
	}
	// $ANTLR end "LENGTH"

	partial void EnterRule_ALIGN_LEFT();
	partial void LeaveRule_ALIGN_LEFT();

	// $ANTLR start "ALIGN_LEFT"
	[GrammarRule("ALIGN_LEFT")]
	private void mALIGN_LEFT()
	{
		EnterRule_ALIGN_LEFT();
		EnterRule("ALIGN_LEFT", 13);
		TraceIn("ALIGN_LEFT", 13);
		try
		{
			int _type = ALIGN_LEFT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:67:11: ( 'left' )
			DebugEnterAlt(1);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:67:13: 'left'
			{
			DebugLocation(67, 13);
			Match("left"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ALIGN_LEFT", 13);
			LeaveRule("ALIGN_LEFT", 13);
			LeaveRule_ALIGN_LEFT();
		}
	}
	// $ANTLR end "ALIGN_LEFT"

	partial void EnterRule_ALIGN_RIGHT();
	partial void LeaveRule_ALIGN_RIGHT();

	// $ANTLR start "ALIGN_RIGHT"
	[GrammarRule("ALIGN_RIGHT")]
	private void mALIGN_RIGHT()
	{
		EnterRule_ALIGN_RIGHT();
		EnterRule("ALIGN_RIGHT", 14);
		TraceIn("ALIGN_RIGHT", 14);
		try
		{
			int _type = ALIGN_RIGHT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:68:12: ( 'right' )
			DebugEnterAlt(1);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:68:14: 'right'
			{
			DebugLocation(68, 14);
			Match("right"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ALIGN_RIGHT", 14);
			LeaveRule("ALIGN_RIGHT", 14);
			LeaveRule_ALIGN_RIGHT();
		}
	}
	// $ANTLR end "ALIGN_RIGHT"

	partial void EnterRule_Digit();
	partial void LeaveRule_Digit();

	// $ANTLR start "Digit"
	[GrammarRule("Digit")]
	private void mDigit()
	{
		EnterRule_Digit();
		EnterRule("Digit", 15);
		TraceIn("Digit", 15);
		try
		{
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:72:7: ( '0' .. '9' )
			DebugEnterAlt(1);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:
			{
			DebugLocation(72, 7);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("Digit", 15);
			LeaveRule("Digit", 15);
			LeaveRule_Digit();
		}
	}
	// $ANTLR end "Digit"

	partial void EnterRule_Letter();
	partial void LeaveRule_Letter();

	// $ANTLR start "Letter"
	[GrammarRule("Letter")]
	private void mLetter()
	{
		EnterRule_Letter();
		EnterRule("Letter", 16);
		TraceIn("Letter", 16);
		try
		{
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:75:8: ( 'a' .. 'z' | 'A' .. 'Z' )
			DebugEnterAlt(1);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:
			{
			DebugLocation(75, 8);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("Letter", 16);
			LeaveRule("Letter", 16);
			LeaveRule_Letter();
		}
	}
	// $ANTLR end "Letter"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 17);
		TraceIn("ID", 17);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:77:4: ( Letter ( Letter | Digit | '_' )* )
			DebugEnterAlt(1);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:78:3: Letter ( Letter | Digit | '_' )*
			{
			DebugLocation(78, 3);
			mLetter(); 
			DebugLocation(78, 10);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:78:10: ( Letter | Digit | '_' )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if (((LA2_0>='0' && LA2_0<='9')||(LA2_0>='A' && LA2_0<='Z')||LA2_0=='_'||(LA2_0>='a' && LA2_0<='z')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:
					{
					DebugLocation(78, 10);
					input.Consume();


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 17);
			LeaveRule("ID", 17);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 18);
		TraceIn("INT", 18);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:80:5: ( Digit ( Digit )* )
			DebugEnterAlt(1);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:81:3: Digit ( Digit )*
			{
			DebugLocation(81, 3);
			mDigit(); 
			DebugLocation(81, 9);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:81:9: ( Digit )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if (((LA3_0>='0' && LA3_0<='9')))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:
					{
					DebugLocation(81, 9);
					input.Consume();


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 18);
			LeaveRule("INT", 18);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	public override void mTokens()
	{
		// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:1:8: ( T__24 | WS | BEGIN | END | PLAIN | SEPARATED | BY | TEXT_SEMICOLON | TEXT_COMMA | FROM | TO | LENGTH | ALIGN_LEFT | ALIGN_RIGHT | ID | INT )
		int alt4=16;
		try { DebugEnterDecision(4, false);
		try
		{
			alt4 = dfa4.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(4); }
		switch (alt4)
		{
		case 1:
			DebugEnterAlt(1);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:1:10: T__24
			{
			DebugLocation(1, 10);
			mT__24(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:1:16: WS
			{
			DebugLocation(1, 16);
			mWS(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:1:19: BEGIN
			{
			DebugLocation(1, 19);
			mBEGIN(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:1:25: END
			{
			DebugLocation(1, 25);
			mEND(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:1:29: PLAIN
			{
			DebugLocation(1, 29);
			mPLAIN(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:1:35: SEPARATED
			{
			DebugLocation(1, 35);
			mSEPARATED(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:1:45: BY
			{
			DebugLocation(1, 45);
			mBY(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:1:48: TEXT_SEMICOLON
			{
			DebugLocation(1, 48);
			mTEXT_SEMICOLON(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:1:63: TEXT_COMMA
			{
			DebugLocation(1, 63);
			mTEXT_COMMA(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:1:74: FROM
			{
			DebugLocation(1, 74);
			mFROM(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:1:79: TO
			{
			DebugLocation(1, 79);
			mTO(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:1:82: LENGTH
			{
			DebugLocation(1, 82);
			mLENGTH(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:1:89: ALIGN_LEFT
			{
			DebugLocation(1, 89);
			mALIGN_LEFT(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:1:100: ALIGN_RIGHT
			{
			DebugLocation(1, 100);
			mALIGN_RIGHT(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:1:112: ID
			{
			DebugLocation(1, 112);
			mID(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// C:\\Users\\franz\\SkyDrive\\Dokumente\\workspace\\TextTable\\src\\eu\\reitmayer\\texttable\\lang\\TextTable.g:1:115: INT
			{
			DebugLocation(1, 115);
			mINT(); 

			}
			break;

		}

	}


	#region DFA
	DFA4 dfa4;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4(this);
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x3\xFFFF\x9\xC\x2\xFFFF\x1\xC\x1\x19\x5\xC\x1\x20\x3\xC\x1\xFFFF\x1"+
			"\x25\x5\xC\x1\xFFFF\x4\xC\x1\xFFFF\x4\xC\x1\x33\x1\xC\x1\x35\x1\xC\x1"+
			"\x37\x1\x38\x2\xC\x1\x3B\x1\xFFFF\x1\xC\x1\xFFFF\x1\x3D\x2\xFFFF\x2\xC"+
			"\x1\xFFFF\x1\x40\x1\xFFFF\x2\xC\x1\xFFFF\x2\xC\x1\x45\x1\x46\x2\xFFFF";
		private const string DFA4_eofS =
			"\x47\xFFFF";
		private const string DFA4_minS =
			"\x1\x9\x2\xFFFF\x1\x65\x1\x6E\x1\x6C\x1\x65\x1\x6F\x1\x72\x1\x6F\x1\x65"+
			"\x1\x69\x2\xFFFF\x1\x67\x1\x30\x1\x64\x1\x61\x2\x6D\x1\x6F\x1\x30\x1"+
			"\x66\x1\x67\x1\x69\x1\xFFFF\x1\x30\x1\x69\x1\x61\x1\x69\x2\x6D\x1\xFFFF"+
			"\x1\x67\x1\x74\x1\x68\x1\x6E\x1\xFFFF\x1\x6E\x1\x72\x1\x63\x1\x61\x1"+
			"\x30\x1\x74\x1\x30\x1\x74\x2\x30\x1\x61\x1\x6F\x1\x30\x1\xFFFF\x1\x68"+
			"\x1\xFFFF\x1\x30\x2\xFFFF\x1\x74\x1\x6C\x1\xFFFF\x1\x30\x1\xFFFF\x1\x65"+
			"\x1\x6F\x1\xFFFF\x1\x64\x1\x6E\x2\x30\x2\xFFFF";
		private const string DFA4_maxS =
			"\x1\x7A\x2\xFFFF\x1\x79\x1\x6E\x1\x6C\x1\x65\x1\x6F\x1\x72\x1\x6F\x1"+
			"\x65\x1\x69\x2\xFFFF\x1\x67\x1\x7A\x1\x64\x1\x61\x1\x70\x1\x6D\x1\x6F"+
			"\x1\x7A\x1\x6E\x1\x67\x1\x69\x1\xFFFF\x1\x7A\x1\x69\x1\x61\x1\x69\x2"+
			"\x6D\x1\xFFFF\x1\x67\x1\x74\x1\x68\x1\x6E\x1\xFFFF\x1\x6E\x1\x72\x1\x63"+
			"\x1\x61\x1\x7A\x1\x74\x1\x7A\x1\x74\x2\x7A\x1\x61\x1\x6F\x1\x7A\x1\xFFFF"+
			"\x1\x68\x1\xFFFF\x1\x7A\x2\xFFFF\x1\x74\x1\x6C\x1\xFFFF\x1\x7A\x1\xFFFF"+
			"\x1\x65\x1\x6F\x1\xFFFF\x1\x64\x1\x6E\x2\x7A\x2\xFFFF";
		private const string DFA4_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x9\xFFFF\x1\xF\x1\x10\xB\xFFFF\x1\x7\x6\xFFFF\x1"+
			"\xB\x4\xFFFF\x1\x4\xD\xFFFF\x1\xA\x1\xFFFF\x1\xD\x1\xFFFF\x1\x3\x1\x5"+
			"\x2\xFFFF\x1\x9\x1\xFFFF\x1\xE\x2\xFFFF\x1\xC\x4\xFFFF\x1\x6\x1\x8";
		private const string DFA4_specialS =
			"\x47\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x2\x2\x1\xFFFF\x2\x2\x12\xFFFF\x1\x2\xF\xFFFF\xA\xD\x1\xFFFF\x1\x1"+
				"\x5\xFFFF\x1A\xC\x6\xFFFF\x1\xC\x1\x3\x1\x7\x1\xC\x1\x4\x1\x8\x5\xC"+
				"\x1\xA\x3\xC\x1\x5\x1\xC\x1\xB\x1\x6\x1\x9\x6\xC",
				"",
				"",
				"\x1\xE\x13\xFFFF\x1\xF",
				"\x1\x10",
				"\x1\x11",
				"\x1\x12",
				"\x1\x13",
				"\x1\x14",
				"\x1\x15",
				"\x1\x16",
				"\x1\x17",
				"",
				"",
				"\x1\x18",
				"\xA\xC\x7\xFFFF\x1A\xC\x4\xFFFF\x1\xC\x1\xFFFF\x1A\xC",
				"\x1\x1A",
				"\x1\x1B",
				"\x1\x1D\x2\xFFFF\x1\x1C",
				"\x1\x1E",
				"\x1\x1F",
				"\xA\xC\x7\xFFFF\x1A\xC\x4\xFFFF\x1\xC\x1\xFFFF\x1A\xC",
				"\x1\x22\x7\xFFFF\x1\x21",
				"\x1\x23",
				"\x1\x24",
				"",
				"\xA\xC\x7\xFFFF\x1A\xC\x4\xFFFF\x1\xC\x1\xFFFF\x1A\xC",
				"\x1\x26",
				"\x1\x27",
				"\x1\x28",
				"\x1\x29",
				"\x1\x2A",
				"",
				"\x1\x2B",
				"\x1\x2C",
				"\x1\x2D",
				"\x1\x2E",
				"",
				"\x1\x2F",
				"\x1\x30",
				"\x1\x31",
				"\x1\x32",
				"\xA\xC\x7\xFFFF\x1A\xC\x4\xFFFF\x1\xC\x1\xFFFF\x1A\xC",
				"\x1\x34",
				"\xA\xC\x7\xFFFF\x1A\xC\x4\xFFFF\x1\xC\x1\xFFFF\x1A\xC",
				"\x1\x36",
				"\xA\xC\x7\xFFFF\x1A\xC\x4\xFFFF\x1\xC\x1\xFFFF\x1A\xC",
				"\xA\xC\x7\xFFFF\x1A\xC\x4\xFFFF\x1\xC\x1\xFFFF\x1A\xC",
				"\x1\x39",
				"\x1\x3A",
				"\xA\xC\x7\xFFFF\x1A\xC\x4\xFFFF\x1\xC\x1\xFFFF\x1A\xC",
				"",
				"\x1\x3C",
				"",
				"\xA\xC\x7\xFFFF\x1A\xC\x4\xFFFF\x1\xC\x1\xFFFF\x1A\xC",
				"",
				"",
				"\x1\x3E",
				"\x1\x3F",
				"",
				"\xA\xC\x7\xFFFF\x1A\xC\x4\xFFFF\x1\xC\x1\xFFFF\x1A\xC",
				"",
				"\x1\x41",
				"\x1\x42",
				"",
				"\x1\x43",
				"\x1\x44",
				"\xA\xC\x7\xFFFF\x1A\xC\x4\xFFFF\x1\xC\x1\xFFFF\x1A\xC",
				"\xA\xC\x7\xFFFF\x1A\xC\x4\xFFFF\x1\xC\x1\xFFFF\x1A\xC",
				"",
				""
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__24 | WS | BEGIN | END | PLAIN | SEPARATED | BY | TEXT_SEMICOLON | TEXT_COMMA | FROM | TO | LENGTH | ALIGN_LEFT | ALIGN_RIGHT | ID | INT );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace TextTableTool
